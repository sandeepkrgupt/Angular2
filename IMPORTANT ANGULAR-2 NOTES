MAIN NOTE -
Component - A component is a directive with a template.
Components are fundamental building blocks of Angular 2 applications.
They have well-defined inputs and outputs.
They have well-defined lifecycle.
They are self-describing.
---------------------------------------------------------------------------------------------------------------
imports — the BrowserModule that this and every application needs to run in a browser.
declarations — the application's lone component, which is also ...
bootstrap — the root component that Angular creates and inserts into the index.html host web page.
----------------------------------------------------------------------------------------------------------------
Angular2, the core concepts are -
components
dependency injection
binding
*****************************************************************************************************************

**DATE - 11/09/2017
1.  Properities i.e names inside  []  always starts from lower letter like [formGroup] but not [FormGroup].
-----------------------------------------------------------------------------------------------------------------
2. Angular Properties must always binds with names starting with camel case i.e starting letter must be small.
-----------------------------------------------------------------------------------------------------------------
3. All Modules which we are importing in app.module must also call or add in import[] array.
-----------------------------------------------------------------------------------------------------------------
4. For using Form tag and Form Controls we must need to import {FormsModule} from '@angular/forms' and call inside import[].
-----------------------------------------------------------------------------------------------------------------
5. All Names starting with @ sign are called Decorators. Decorators contains the reference of any Class.
-----------------------------------------------------------------------------------------------------------------
6. When we create custom services we need to import them at two Places - 
i. - > in app.module 
import {NewServiceName} from './serviveFolderName/serviceFileName.service;
then call your New Service inside Prodivers: [] Array.
NOTE - ALWAYS SAVE SERVICE FILE AS filename.service.ts to easily identify service file and keep it inside service Folder.

ii. - > Then you also need to import in component.ts file
import {NewServiceName} from '../serviceFolderName/filename;
Then you need to store these services inside variable in constructor() function like this - 
constructor(private var_name : NewServiceName) {}
-----------------------------------------------------------------------------------------------------------------
7. If you are creating multiple services and want to use them in one common service that you have created then you need to import them all 
inside that common service file and YOU ONLY NEED TO IMPORT THAT COMMOM SERVICE FILE INSIDE component.ts file.
In your common service file you need to create constructor inside one class and need to export the class like this -
    export class GrossSalary{
	       constructor(private varda : empSalDA, private varta : empSalTA){
	   }
    HERE empSalDA AND empSalTA ARE TWO MORE SERVICES.
FOR USING ONE OR MORE SERVICE INSIDE ANOTHER SERVICE WE NEED TO Import {Injectable} from '@angular/core' AND CALL @Injectable() Decorator.
YOU MUST NOT USE ; AFTER @Injectable() code. Like - @Injectable(); is wrong.
-----------------------------------------------------------------------------------------------------------------
8. CONSTRUCTOR -  Every class which is having it's own object is known as constructor or in other words , A constructor is a special 
method of a class that initializes objects of its own type.
-----------------------------------------------------------------------------------------------------------------
9. 'this' operator is used to access the members of it's own class or the class itself. 
-----------------------------------------------------------------------------------------------------------------
10. When we create Service, object automatically gets created, so we need access the data using 'this' operator
-----------------------------------------------------------------------------------------------------------------
11. In Factory we need to create object like - > var Obj = {} manually.
-----------------------------------------------------------------------------------------------------------------
12.In Angular 2 Filters are known as Pipes - 
   For Creating our own Pipe we need to do Following - >
   import {Pipe, PipeTransform} from '@angular/core';
   @Pipe({name : 'pipe_Variable_name'}) (Don't use ; Here)
   export class Class_Name implements PipeTransform(){
     transform(any_variable : dataType){  // Here transform is constructor of PipeTransform Interface.
      --------
      Logic
      --------
     }
   }
   CALLING PIPE - >
   <p>{{val  | pipe_Variable_name}}</p>
   First argument is the variable initialized in component.ts Like - > 
   export class EvenoddcompComponent implements OnInit {
      private val : number = 23;
    }
   And Second argument is the pipe.
   
**DATE - 13/09/2017
-----------------------------------------------------------------------------------------------------------------
13. IT IS IMPORTANT TO IMPORT 'FormsModule' AND CALL IT INSIDE Import[] IF WE ARE USING FORM AND FORM CONTROLS.
-----------------------------------------------------------------------------------------------------------------
14.  FORMS WITH TEMPLATE BASED APPROACH --- >
For this follow these Steps -
i -> In app.module 
import {FormsModule} from '@angular/forms';

ii -> in component.ts
import {ViewChild} from '@angular/core';
import {NgForm} from '@angular/forms';
Then craete one variable of ViewChild of type NgForm Like -
export class CopmComponent implements OnInit {
	@ViewChild('myFrm') login_dtl : NgForm;
	  constructor() { }
	  ngOnInit() { }
	}

iii -> In your HTML file make the reference of your form and bind input fields with ngModel Like -
	<form #myFrm = "ngForm">
		Name : <input type="text" name="fstname" ngModel >
		mobile : <input type="number" name="number" ngModel>
		<button (click)="add()">Add</button>
	</form>
iv - > In your add function call the reference variable like -
	add(){
		console.log(this.login_dtl);
	}
	
v -> For Validations Follow These Steps -
<form #myFrm = "ngForm" (ngSubmit)="add();" class="form-group">
	<label>E-Mail : 
		<!-- Field Validation -->
		<span *ngIf="email.errors" style="color:red;">
			<span *ngIf="email.touched && !email.valid">Enter email</span>
			<span *ngIf="email.errors && email.errors.pattern">  | Email is invalid</span>
		</span>
		<!-- End -->
		<input type="email" name="email" ngModel #email="ngModel" required class="form-control" pattern="^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$">
	</label>
	<br>
	<button type="submit" value="submit" class="btn btn-info">Add</button>
</form>
NOTE : - INPUT NAME (name=" ") AND REFERENCE NAME (#ref_name) BOTH MUST BE SAME LIKE - name="email"    #email="ngModel"
-----------------------------------------------------------------------------------------------------------------
15. For Pushing form data into array we need to do following  -
@ViewChild('myFrm') ctc_dtl : NgForm;
add(){
	var x = this.newusr.push({email : this.ctc_dtl.value.email});
	return x;
}
where 
private newusr : any [] = [{}];  //  Empty Array , you can put some value if you want ...
-------------------------------------------------------------------------------------------------------------------
16. Directives -
there are three types of directives -
1. component - directive which has template.
2. structural - these can change dom layout by adding and removing elements. like *ngIf, *ngFor etc..
3. attribute - it changes behavoir of other component or direcives. it just like ng-show , ng-hide , ng-click etc, ang predefined 

for using our own directive we need to do following -
1. import {Directive, ElementRef, Renderer, HostListener} from '@angular/core';
2. @Directive({selector : '[directive_name]'}) // any name which will pass to our html page.
3. export class directive_name {
constructor(private ele : ElementRef, private rend : Renderer){

}
@HostListener('mouseover') mouseover(){
	this.rend.setElementStyle(this.ele.nativeElement, 'color','red');
}
@HostListener('mouseout') mouseout(){
	this.rend.setElementStyle(this.ele.nativeElement, 'color','green')
}
}
4. In app.module -
import {directive_name} from './directives/directive_name.directive.ts';
inside declarations write directive_name
** HostListener vs HostBinding -
HostBinding is used to add css style simply. Like - @HostBinding('style.backgroundColor') c_colorrr = "red"; 
HostListener is used to add css on any event Like Above.
--------------------------------------------------------------------------------------------------------------------------
17. @Input() decorator is used to send data from parent to child component.
import { Input } from '@angular/core';

inside class
@Input() variable_name : dataType ;
--------------------------------------------------------------------------------------------------------------------------
Directives are of 3 types - 
1. Component Directive  like - <my-directive></my-directive>
2. Structural Directive - <div *myDirective = "value"></div>
3. Attribute Directive - <div myDirective></div> or <div [myDirective] = "value/variable"></div>

In Attribute directive -
for using events like click, mouse over , mouse out etc. we need to import
import { ElementRef, Renderer, HostListener } from '@angular/core';
and pass Elementef, Renderer inside constructor -
constructor(private ele : ElementRef, private render : Renderer) {}
and for mouseeover and out -
@HostListener('mouseover') mouseover(){

   this.render.setElementStyle(this.ele.nativeElement,'font-weight','bold');
   }

   @HostListener('mouseout') mouseout(){

   this.render.setElementStyle(this.ele.nativeElement,'font-weight','normal');
   }
   Note -
   Renderer - You can use the Renderer Class to achieve dynamic event bindings. 
   ** How to call events like mouseover and mouseout without using HostListner ?
   Ans - There is another way -
   constructor(elementRef: ElementRef, renderer: Renderer) {

    // Listen to click events in the component
    renderer.listen(elementRef.nativeElement, 'click', (event) => {
      // Do something with 'event'
    })
);
Here - listen is local for that component only.

You can use listenGlobal that will give you access to document, body, etc.
renderer.listenGlobal('document', 'click', (event) => {
  // Do something with 'event'
});
-------------------------------------------------------------------------------------------------------------------------
   2. Structural directives - this directive changes the complete HTML UI. For example if *ngFor is true then ui get changed
   and false it also get some changes.
   we can create our own str directive. steps -
   import { TemplateRef, ViewContainerRef, Input } from '@angular/core';
   
   inside our class -
    constructor(private tem : TemplateRef<any>, private container : ViewContainerRef) { }
    then,
    @Input('appLoopDir') set check(n : Number){  // appLoopDir is our directive name.( You can give any func name inplaceof check.)
	
	for(let i=1; i<=n ; i++){
	this.container.createEmbeddedView(this.tem);
	}
}

calling our str directive -
inside your component html file -
<li *appLoopDir = "10">
	am indian
</li>
it will show this 10 times.

Note -
ViewContainerRef -  In Angular we usually manipulate the DOM using ViewContainerRef.
createEmbeddedView - It's used to create a view using TemplateRef.
TemplateRef - It is created by Angular compiler when it encounters ng-template tag in your component html.


